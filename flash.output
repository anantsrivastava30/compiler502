State 20 conflicts: 1 reduce/reduce
State 31 conflicts: 2 reduce/reduce
State 62 conflicts: 3 shift/reduce
State 63 conflicts: 3 shift/reduce
State 64 conflicts: 3 shift/reduce
State 65 conflicts: 3 shift/reduce
State 66 conflicts: 3 shift/reduce
State 67 conflicts: 8 shift/reduce
State 68 conflicts: 8 shift/reduce
State 69 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: LET declaration IN $@1 commands END

    3 declaration: %empty
    4            | declaration declarations

    5 declarations: SKIP
    6             | INTEGER id_seqi IDENTIFIER ';'
    7             | BOOLE id_seqb IDENTIFIER ';'

    8 id_seqi: %empty
    9        | id_seqi IDENTIFIER ','

   10 id_seqb: %empty
   11        | id_seqb IDENTIFIER ','

   12 commands: %empty
   13         | commands command ';'

   14 command: SKIP
   15        | READ IDENTIFIER
   16        | READ '#' IDENTIFIER
   17        | WRITE exp_int
   18        | WRITE '#' exp_bol
   19        | IDENTIFIER ASSGNOP exp_int
   20        | IDENTIFIER ASSGNOP exp_bol

   21 $@2: %empty

   22 $@3: %empty

   23 $@4: %empty

   24 command: IF exp_int $@2 THEN commands $@3 ELSE $@4 commands FI

   25 $@5: %empty

   26 $@6: %empty

   27 command: WHILE $@5 exp_int $@6 DO commands END

   28 $@7: %empty

   29 $@8: %empty

   30 $@9: %empty

   31 command: IF exp_bol $@7 THEN commands $@8 ELSE $@9 commands FI

   32 $@10: %empty

   33 $@11: %empty

   34 command: WHILE $@10 exp_bol $@11 DO commands END

   35 exp_int: NUMBER
   36        | IDENTIFIER
   37        | exp_int '<' exp_int
   38        | exp_int '=' exp_int
   39        | exp_int '>' exp_int
   40        | exp_int '+' exp_int
   41        | exp_int '-' exp_int
   42        | exp_int '*' exp_int
   43        | exp_int '/' exp_int
   44        | exp_int '^' exp_int
   45        | '(' exp_int ')'

   46 exp_bol: BOOLEAN
   47        | IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'#' (35) 16 18
'(' (40) 45
')' (41) 45
'*' (42) 42
'+' (43) 40
',' (44) 9 11
'-' (45) 41
'/' (47) 43
';' (59) 6 7 13
'<' (60) 37
'=' (61) 38
'>' (62) 39
'^' (94) 44
error (256)
BOOLEAN (258) 46
NUMBER (259) 35
IDENTIFIER (260) 6 7 9 11 15 16 19 20 36 47
IF (261) 24 31
WHILE (262) 27 34
SKIP (263) 5 14
THEN (264) 24 31
ELSE (265) 24 31
FI (266) 24 31
DO (267) 27 34
END (268) 2 27 34
INTEGER (269) 6
READ (270) 15 16
WRITE (271) 17 18
LET (272) 2
IN (273) 2
BOOLE (274) 7
ASSGNOP (275) 19 20


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 2, on right: 0
$@1 (36)
    on left: 1, on right: 2
declaration (37)
    on left: 3 4, on right: 2 4
declarations (38)
    on left: 5 6 7, on right: 4
id_seqi (39)
    on left: 8 9, on right: 6 9
id_seqb (40)
    on left: 10 11, on right: 7 11
commands (41)
    on left: 12 13, on right: 2 13 24 27 31 34
command (42)
    on left: 14 15 16 17 18 19 20 24 27 31 34, on right: 13
$@2 (43)
    on left: 21, on right: 24
$@3 (44)
    on left: 22, on right: 24
$@4 (45)
    on left: 23, on right: 24
$@5 (46)
    on left: 25, on right: 27
$@6 (47)
    on left: 26, on right: 27
$@7 (48)
    on left: 28, on right: 31
$@8 (49)
    on left: 29, on right: 31
$@9 (50)
    on left: 30, on right: 31
$@10 (51)
    on left: 32, on right: 34
$@11 (52)
    on left: 33, on right: 34
exp_int (53)
    on left: 35 36 37 38 39 40 41 42 43 44 45, on right: 17 19 24 27
    37 38 39 40 41 42 43 44 45
exp_bol (54)
    on left: 46 47, on right: 18 20 31 34


State 0

    0 $accept: . program $end

    LET  shift, and go to state 1

    program  go to state 2


State 1

    2 program: LET . declaration IN $@1 commands END

    $default  reduce using rule 3 (declaration)

    declaration  go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    2 program: LET declaration . IN $@1 commands END
    4 declaration: declaration . declarations

    SKIP     shift, and go to state 5
    INTEGER  shift, and go to state 6
    IN       shift, and go to state 7
    BOOLE    shift, and go to state 8

    declarations  go to state 9


State 4

    0 $accept: program $end .

    $default  accept


State 5

    5 declarations: SKIP .

    $default  reduce using rule 5 (declarations)


State 6

    6 declarations: INTEGER . id_seqi IDENTIFIER ';'

    $default  reduce using rule 8 (id_seqi)

    id_seqi  go to state 10


State 7

    2 program: LET declaration IN . $@1 commands END

    $default  reduce using rule 1 ($@1)

    $@1  go to state 11


State 8

    7 declarations: BOOLE . id_seqb IDENTIFIER ';'

    $default  reduce using rule 10 (id_seqb)

    id_seqb  go to state 12


State 9

    4 declaration: declaration declarations .

    $default  reduce using rule 4 (declaration)


State 10

    6 declarations: INTEGER id_seqi . IDENTIFIER ';'
    9 id_seqi: id_seqi . IDENTIFIER ','

    IDENTIFIER  shift, and go to state 13


State 11

    2 program: LET declaration IN $@1 . commands END

    $default  reduce using rule 12 (commands)

    commands  go to state 14


State 12

    7 declarations: BOOLE id_seqb . IDENTIFIER ';'
   11 id_seqb: id_seqb . IDENTIFIER ','

    IDENTIFIER  shift, and go to state 15


State 13

    6 declarations: INTEGER id_seqi IDENTIFIER . ';'
    9 id_seqi: id_seqi IDENTIFIER . ','

    ';'  shift, and go to state 16
    ','  shift, and go to state 17


State 14

    2 program: LET declaration IN $@1 commands . END
   13 commands: commands . command ';'

    IDENTIFIER  shift, and go to state 18
    IF          shift, and go to state 19
    WHILE       shift, and go to state 20
    SKIP        shift, and go to state 21
    END         shift, and go to state 22
    READ        shift, and go to state 23
    WRITE       shift, and go to state 24

    command  go to state 25


State 15

    7 declarations: BOOLE id_seqb IDENTIFIER . ';'
   11 id_seqb: id_seqb IDENTIFIER . ','

    ';'  shift, and go to state 26
    ','  shift, and go to state 27


State 16

    6 declarations: INTEGER id_seqi IDENTIFIER ';' .

    $default  reduce using rule 6 (declarations)


State 17

    9 id_seqi: id_seqi IDENTIFIER ',' .

    $default  reduce using rule 9 (id_seqi)


State 18

   19 command: IDENTIFIER . ASSGNOP exp_int
   20        | IDENTIFIER . ASSGNOP exp_bol

    ASSGNOP  shift, and go to state 28


State 19

   24 command: IF . exp_int $@2 THEN commands $@3 ELSE $@4 commands FI
   31        | IF . exp_bol $@7 THEN commands $@8 ELSE $@9 commands FI

    BOOLEAN     shift, and go to state 29
    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 32

    exp_int  go to state 33
    exp_bol  go to state 34


State 20

   27 command: WHILE . $@5 exp_int $@6 DO commands END
   34        | WHILE . $@10 exp_bol $@11 DO commands END

    BOOLEAN     reduce using rule 32 ($@10)
    IDENTIFIER  reduce using rule 25 ($@5)
    IDENTIFIER  [reduce using rule 32 ($@10)]
    $default    reduce using rule 25 ($@5)

    $@5   go to state 35
    $@10  go to state 36


State 21

   14 command: SKIP .

    $default  reduce using rule 14 (command)


State 22

    2 program: LET declaration IN $@1 commands END .

    $default  reduce using rule 2 (program)


State 23

   15 command: READ . IDENTIFIER
   16        | READ . '#' IDENTIFIER

    IDENTIFIER  shift, and go to state 37
    '#'         shift, and go to state 38


State 24

   17 command: WRITE . exp_int
   18        | WRITE . '#' exp_bol

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '#'         shift, and go to state 40
    '('         shift, and go to state 32

    exp_int  go to state 41


State 25

   13 commands: commands command . ';'

    ';'  shift, and go to state 42


State 26

    7 declarations: BOOLE id_seqb IDENTIFIER ';' .

    $default  reduce using rule 7 (declarations)


State 27

   11 id_seqb: id_seqb IDENTIFIER ',' .

    $default  reduce using rule 11 (id_seqb)


State 28

   19 command: IDENTIFIER ASSGNOP . exp_int
   20        | IDENTIFIER ASSGNOP . exp_bol

    BOOLEAN     shift, and go to state 29
    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    '('         shift, and go to state 32

    exp_int  go to state 43
    exp_bol  go to state 44


State 29

   46 exp_bol: BOOLEAN .

    $default  reduce using rule 46 (exp_bol)


State 30

   35 exp_int: NUMBER .

    $default  reduce using rule 35 (exp_int)


State 31

   36 exp_int: IDENTIFIER .
   47 exp_bol: IDENTIFIER .

    THEN      reduce using rule 36 (exp_int)
    THEN      [reduce using rule 47 (exp_bol)]
    ';'       reduce using rule 36 (exp_int)
    ';'       [reduce using rule 47 (exp_bol)]
    $default  reduce using rule 36 (exp_int)


State 32

   45 exp_int: '(' . exp_int ')'

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 45


State 33

   24 command: IF exp_int . $@2 THEN commands $@3 ELSE $@4 commands FI
   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '-'  shift, and go to state 46
    '+'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    $default  reduce using rule 21 ($@2)

    $@2  go to state 54


State 34

   31 command: IF exp_bol . $@7 THEN commands $@8 ELSE $@9 commands FI

    $default  reduce using rule 28 ($@7)

    $@7  go to state 55


State 35

   27 command: WHILE $@5 . exp_int $@6 DO commands END

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 56


State 36

   34 command: WHILE $@10 . exp_bol $@11 DO commands END

    BOOLEAN     shift, and go to state 29
    IDENTIFIER  shift, and go to state 57

    exp_bol  go to state 58


State 37

   15 command: READ IDENTIFIER .

    $default  reduce using rule 15 (command)


State 38

   16 command: READ '#' . IDENTIFIER

    IDENTIFIER  shift, and go to state 59


State 39

   36 exp_int: IDENTIFIER .

    $default  reduce using rule 36 (exp_int)


State 40

   18 command: WRITE '#' . exp_bol

    BOOLEAN     shift, and go to state 29
    IDENTIFIER  shift, and go to state 57

    exp_bol  go to state 60


State 41

   17 command: WRITE exp_int .
   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '-'  shift, and go to state 46
    '+'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    $default  reduce using rule 17 (command)


State 42

   13 commands: commands command ';' .

    $default  reduce using rule 13 (commands)


State 43

   19 command: IDENTIFIER ASSGNOP exp_int .
   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '-'  shift, and go to state 46
    '+'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    $default  reduce using rule 19 (command)


State 44

   20 command: IDENTIFIER ASSGNOP exp_bol .

    $default  reduce using rule 20 (command)


State 45

   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int
   45        | '(' exp_int . ')'

    '-'  shift, and go to state 46
    '+'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53
    ')'  shift, and go to state 61


State 46

   41 exp_int: exp_int '-' . exp_int

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 62


State 47

   40 exp_int: exp_int '+' . exp_int

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 63


State 48

   42 exp_int: exp_int '*' . exp_int

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 64


State 49

   43 exp_int: exp_int '/' . exp_int

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 65


State 50

   44 exp_int: exp_int '^' . exp_int

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 66


State 51

   37 exp_int: exp_int '<' . exp_int

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 67


State 52

   38 exp_int: exp_int '=' . exp_int

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 68


State 53

   39 exp_int: exp_int '>' . exp_int

    NUMBER      shift, and go to state 30
    IDENTIFIER  shift, and go to state 39
    '('         shift, and go to state 32

    exp_int  go to state 69


State 54

   24 command: IF exp_int $@2 . THEN commands $@3 ELSE $@4 commands FI

    THEN  shift, and go to state 70


State 55

   31 command: IF exp_bol $@7 . THEN commands $@8 ELSE $@9 commands FI

    THEN  shift, and go to state 71


State 56

   27 command: WHILE $@5 exp_int . $@6 DO commands END
   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '-'  shift, and go to state 46
    '+'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    $default  reduce using rule 26 ($@6)

    $@6  go to state 72


State 57

   47 exp_bol: IDENTIFIER .

    $default  reduce using rule 47 (exp_bol)


State 58

   34 command: WHILE $@10 exp_bol . $@11 DO commands END

    $default  reduce using rule 33 ($@11)

    $@11  go to state 73


State 59

   16 command: READ '#' IDENTIFIER .

    $default  reduce using rule 16 (command)


State 60

   18 command: WRITE '#' exp_bol .

    $default  reduce using rule 18 (command)


State 61

   45 exp_int: '(' exp_int ')' .

    $default  reduce using rule 45 (exp_int)


State 62

   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   41        | exp_int '-' exp_int .
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    '<'       [reduce using rule 41 (exp_int)]
    '='       [reduce using rule 41 (exp_int)]
    '>'       [reduce using rule 41 (exp_int)]
    $default  reduce using rule 41 (exp_int)


State 63

   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   40        | exp_int '+' exp_int .
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    '<'       [reduce using rule 40 (exp_int)]
    '='       [reduce using rule 40 (exp_int)]
    '>'       [reduce using rule 40 (exp_int)]
    $default  reduce using rule 40 (exp_int)


State 64

   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   42        | exp_int '*' exp_int .
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    '<'       [reduce using rule 42 (exp_int)]
    '='       [reduce using rule 42 (exp_int)]
    '>'       [reduce using rule 42 (exp_int)]
    $default  reduce using rule 42 (exp_int)


State 65

   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   43        | exp_int '/' exp_int .
   44        | exp_int . '^' exp_int

    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    '<'       [reduce using rule 43 (exp_int)]
    '='       [reduce using rule 43 (exp_int)]
    '>'       [reduce using rule 43 (exp_int)]
    $default  reduce using rule 43 (exp_int)


State 66

   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int
   44        | exp_int '^' exp_int .

    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    '<'       [reduce using rule 44 (exp_int)]
    '='       [reduce using rule 44 (exp_int)]
    '>'       [reduce using rule 44 (exp_int)]
    $default  reduce using rule 44 (exp_int)


State 67

   37 exp_int: exp_int . '<' exp_int
   37        | exp_int '<' exp_int .
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '-'  shift, and go to state 46
    '+'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    '-'       [reduce using rule 37 (exp_int)]
    '+'       [reduce using rule 37 (exp_int)]
    '*'       [reduce using rule 37 (exp_int)]
    '/'       [reduce using rule 37 (exp_int)]
    '^'       [reduce using rule 37 (exp_int)]
    '<'       [reduce using rule 37 (exp_int)]
    '='       [reduce using rule 37 (exp_int)]
    '>'       [reduce using rule 37 (exp_int)]
    $default  reduce using rule 37 (exp_int)


State 68

   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   38        | exp_int '=' exp_int .
   39        | exp_int . '>' exp_int
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '-'  shift, and go to state 46
    '+'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    '-'       [reduce using rule 38 (exp_int)]
    '+'       [reduce using rule 38 (exp_int)]
    '*'       [reduce using rule 38 (exp_int)]
    '/'       [reduce using rule 38 (exp_int)]
    '^'       [reduce using rule 38 (exp_int)]
    '<'       [reduce using rule 38 (exp_int)]
    '='       [reduce using rule 38 (exp_int)]
    '>'       [reduce using rule 38 (exp_int)]
    $default  reduce using rule 38 (exp_int)


State 69

   37 exp_int: exp_int . '<' exp_int
   38        | exp_int . '=' exp_int
   39        | exp_int . '>' exp_int
   39        | exp_int '>' exp_int .
   40        | exp_int . '+' exp_int
   41        | exp_int . '-' exp_int
   42        | exp_int . '*' exp_int
   43        | exp_int . '/' exp_int
   44        | exp_int . '^' exp_int

    '-'  shift, and go to state 46
    '+'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    '^'  shift, and go to state 50
    '<'  shift, and go to state 51
    '='  shift, and go to state 52
    '>'  shift, and go to state 53

    '-'       [reduce using rule 39 (exp_int)]
    '+'       [reduce using rule 39 (exp_int)]
    '*'       [reduce using rule 39 (exp_int)]
    '/'       [reduce using rule 39 (exp_int)]
    '^'       [reduce using rule 39 (exp_int)]
    '<'       [reduce using rule 39 (exp_int)]
    '='       [reduce using rule 39 (exp_int)]
    '>'       [reduce using rule 39 (exp_int)]
    $default  reduce using rule 39 (exp_int)


State 70

   24 command: IF exp_int $@2 THEN . commands $@3 ELSE $@4 commands FI

    $default  reduce using rule 12 (commands)

    commands  go to state 74


State 71

   31 command: IF exp_bol $@7 THEN . commands $@8 ELSE $@9 commands FI

    $default  reduce using rule 12 (commands)

    commands  go to state 75


State 72

   27 command: WHILE $@5 exp_int $@6 . DO commands END

    DO  shift, and go to state 76


State 73

   34 command: WHILE $@10 exp_bol $@11 . DO commands END

    DO  shift, and go to state 77


State 74

   13 commands: commands . command ';'
   24 command: IF exp_int $@2 THEN commands . $@3 ELSE $@4 commands FI

    IDENTIFIER  shift, and go to state 18
    IF          shift, and go to state 19
    WHILE       shift, and go to state 20
    SKIP        shift, and go to state 21
    READ        shift, and go to state 23
    WRITE       shift, and go to state 24

    $default  reduce using rule 22 ($@3)

    command  go to state 25
    $@3      go to state 78


State 75

   13 commands: commands . command ';'
   31 command: IF exp_bol $@7 THEN commands . $@8 ELSE $@9 commands FI

    IDENTIFIER  shift, and go to state 18
    IF          shift, and go to state 19
    WHILE       shift, and go to state 20
    SKIP        shift, and go to state 21
    READ        shift, and go to state 23
    WRITE       shift, and go to state 24

    $default  reduce using rule 29 ($@8)

    command  go to state 25
    $@8      go to state 79


State 76

   27 command: WHILE $@5 exp_int $@6 DO . commands END

    $default  reduce using rule 12 (commands)

    commands  go to state 80


State 77

   34 command: WHILE $@10 exp_bol $@11 DO . commands END

    $default  reduce using rule 12 (commands)

    commands  go to state 81


State 78

   24 command: IF exp_int $@2 THEN commands $@3 . ELSE $@4 commands FI

    ELSE  shift, and go to state 82


State 79

   31 command: IF exp_bol $@7 THEN commands $@8 . ELSE $@9 commands FI

    ELSE  shift, and go to state 83


State 80

   13 commands: commands . command ';'
   27 command: WHILE $@5 exp_int $@6 DO commands . END

    IDENTIFIER  shift, and go to state 18
    IF          shift, and go to state 19
    WHILE       shift, and go to state 20
    SKIP        shift, and go to state 21
    END         shift, and go to state 84
    READ        shift, and go to state 23
    WRITE       shift, and go to state 24

    command  go to state 25


State 81

   13 commands: commands . command ';'
   34 command: WHILE $@10 exp_bol $@11 DO commands . END

    IDENTIFIER  shift, and go to state 18
    IF          shift, and go to state 19
    WHILE       shift, and go to state 20
    SKIP        shift, and go to state 21
    END         shift, and go to state 85
    READ        shift, and go to state 23
    WRITE       shift, and go to state 24

    command  go to state 25


State 82

   24 command: IF exp_int $@2 THEN commands $@3 ELSE . $@4 commands FI

    $default  reduce using rule 23 ($@4)

    $@4  go to state 86


State 83

   31 command: IF exp_bol $@7 THEN commands $@8 ELSE . $@9 commands FI

    $default  reduce using rule 30 ($@9)

    $@9  go to state 87


State 84

   27 command: WHILE $@5 exp_int $@6 DO commands END .

    $default  reduce using rule 27 (command)


State 85

   34 command: WHILE $@10 exp_bol $@11 DO commands END .

    $default  reduce using rule 34 (command)


State 86

   24 command: IF exp_int $@2 THEN commands $@3 ELSE $@4 . commands FI

    $default  reduce using rule 12 (commands)

    commands  go to state 88


State 87

   31 command: IF exp_bol $@7 THEN commands $@8 ELSE $@9 . commands FI

    $default  reduce using rule 12 (commands)

    commands  go to state 89


State 88

   13 commands: commands . command ';'
   24 command: IF exp_int $@2 THEN commands $@3 ELSE $@4 commands . FI

    IDENTIFIER  shift, and go to state 18
    IF          shift, and go to state 19
    WHILE       shift, and go to state 20
    SKIP        shift, and go to state 21
    FI          shift, and go to state 90
    READ        shift, and go to state 23
    WRITE       shift, and go to state 24

    command  go to state 25


State 89

   13 commands: commands . command ';'
   31 command: IF exp_bol $@7 THEN commands $@8 ELSE $@9 commands . FI

    IDENTIFIER  shift, and go to state 18
    IF          shift, and go to state 19
    WHILE       shift, and go to state 20
    SKIP        shift, and go to state 21
    FI          shift, and go to state 91
    READ        shift, and go to state 23
    WRITE       shift, and go to state 24

    command  go to state 25


State 90

   24 command: IF exp_int $@2 THEN commands $@3 ELSE $@4 commands FI .

    $default  reduce using rule 24 (command)


State 91

   31 command: IF exp_bol $@7 THEN commands $@8 ELSE $@9 commands FI .

    $default  reduce using rule 31 (command)
